# All paths are relative to the configuration file

[DEFAULT]
# This is the case, workers either operate on that or will use it as a build target, like Casebuilder
case = target_case
# Log to case directory, defaults to true.
log = True

[CasebuilderWorker]
do = 1
# Class path that implements this worker
class = workers.Casebuilder
# pyFoamCaseBuilder control file
casebuilder_template = case.pfcb
# Template case
case_template = case.template
# Overwrite case if it already exists
overwrite = True

# fluent OR copy OR spider
mesh_method = fluent

# If mesh_method=fluent, mesh is the fluent mesh file.
# If mesh_method=copy, mesh is the case to get the mesh from
# If mesh_method=spider, mesh is the path to the spider configuration file.
mesh = fluent.msh
# mesh = Case.template
# Used only if mesh_method=copy. Timestep to copy the mesh from.
time = 0

# Optional additional arguments which are provided to fluentMeshToFoam. 
# Ignored for method=copy.
mesh_arguments=-writeSets -writeZones 

[ExternalCommand]
do = 0
class = workers.ExternalCommand
# Position must be assigned here. The ExternalCommand does not define a position itself.
position = 100
# Command to execute. The command will be executed through a shell.
command = echo %(general.case)s

# Should an exception be raised and the job being quit if the command returned with a non-zero code.
fail_on_error = False

[Spider]
do = 0
class = workers.Spider
# Overwrite mesh if it already exists
overwrite = True
# Spider configuration file
configuration = spider/sp.conf


[Decompose]
do = 0
class = workers.Decompose
# Method used for decomposing
method = simple
# These options correspond to the options in decomposeParDict
n = (2,1,1)        
delta = 0.001
# Number of processors
proc = 2


[PotentialFoam]
do = 0
class = workers.PotentialFoam
# Backup the 0 dir before potentialFoam execution.
backup_0_to = 
# Overwrite backup, if existing.
overwrite = False
# Omit execution of function objects
no_function_objects = True

[FoamRunner]
do = 0
class = workers.FoamRunner
solver = simpleFoam

[FoamUtility]
do = 0
class = workers.FoamUtility
utility = wallShearStress
# Optional, either a timestep or latestTime
time = latestTime
# Execute in parallel if case is decomposed. Defaults to True
parallel = True 

[Reconstruct]
class = workers.ReconstructCase
# Timestep to reconstruct or latestTime
time = latestTime